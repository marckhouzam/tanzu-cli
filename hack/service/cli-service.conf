# Use the current time a semi-random hash.
# This will allow to sometimes get a different set of recommended plugins when querying the endpoint.
# Beyond possibly changing the recommended plugins when changing contexts, it also simulates
# the upgrade of an existing context, which can happen at any time.
split_clients "${msec}" $discovery {
    50%   discovery-with-certs.txt;
 #   33%   discovery-1.0.txt;
    *     discovery-1.1.txt;
}

server {
    listen 443 ssl;
    server_name localhost;
    root /var/www/html;
    ssl_certificate     /certs/localhost.crt;
    ssl_certificate_key /certs/localhost.key;

    location /cli/v1/install {
        index install.txt;
    }

    location /cli/v1/plugin/discovery {
        index $discovery;
    }

    location /cli/v1/binary {
        autoindex on;
    }

    #######################################
    # Passthrough to the plugin repository
    #######################################

    # Allow the root path since queries start with a call to just /v2
    location /v2 {
# 192.168.65.254 is the ip address that I get if I `ping host.docker.internal`
# from within the nginx container.  I can't use host.docker.internal for some reason
        proxy_pass https://192.168.65.254:9876/v2;
    }

# NOTE: the two lines below need tanzu-cli -> tanzu_cli if we want to passthrough
# the real central repository (as well as changing the host)

    # Allow the path specific to the Tanzu CLI data
    location ~ ^/v2/tanzu-cli/plugins/(.*)$ {
# 192.168.65.254 is the ip address that I get if I `ping host.docker.internal`
# from within the nginx container.  I can't use host.docker.internal for some reason
        proxy_pass https://192.168.65.254:9876/v2/tanzu-cli/plugins/$1$is_args$args;
    }

    # Deny all other paths than the above so that we don't expose the entire registry
    location ~ ^/v2/..*$ {
        deny all;
    }
}
